version: '3.8'

services:
  auth_db:
    image: postgres:15
    container_name: auth_db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: auth
    ports:
      - "5432:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
      - ./auth/migrations:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d auth"]
      interval: 5s
      timeout: 5s
      retries: 5

  comment_db:
    image: postgres:15
    container_name: comment_db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: comments
    ports:
      - "5434:5432"
    volumes:
      - comment_postgres_data:/var/lib/postgresql/data
      - ./comment_service/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d comments"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth_service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth_service
    depends_on:
      - auth_db
    ports:
      - "8082:8082"
      - "50052:50052"
    env_file:
      - ./auth/.env
    volumes:
      - ./logs:/var/log/auth
      - ./auth/config/config.yml:/app/config/config.yml
      - ./auth/.env:/app/.env
    networks:
      - backend

  delivery_db:
    image: postgres:15
    container_name: delivery_db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: delivery
    ports:
      - "5433:5432"
    volumes:
      - delivery_postgres_data:/var/lib/postgresql/data
      - ./delivery_service/migrations:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d delivery"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  delivery_server:
    build:
      context: ./delivery_service
      dockerfile: Dockerfile
    container_name: delivery_server
    depends_on:
      delivery_db:
        condition: service_healthy
      auth_service:
        condition: service_started
    ports:
      - "8083:8083"
    env_file:
      - ./delivery_service/.env
    environment:
      DB_HOST: delivery_db
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: 123
      DB_NAME: delivery
    volumes:
      - ./logs:/var/log/app
      - ./delivery_service/config/redis.yml:/app/config/redis.yml
      - ./delivery_service/config/config.yml:/app/config/config.yml
      - ./delivery_service/.env:/app/.env
    networks:
      - backend

  comment_server:
    build:
      context: ./comment_service
      dockerfile: Dockerfile
    container_name: comment_server
    depends_on:
      - comment_db
    ports:
      - "8084:8084"
    environment:
      DB_HOST: comment_db
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: 123
      DB_NAME: comments
    networks:
      - backend

  notify:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: notification_service
    depends_on:
      - redis
    env_file:
      - ./notification_service/.env
    volumes:
      - ./notification_service/config/redis.yml:/app/config/redis.yml
      - ./notification_service/config/notify.yml:/app/config/notify.yml
      - ./notification_service/.env:/app/.env
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - backend
    depends_on:
      - auth_service
      - delivery_server
      - comment_server
      - notify

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - backend

  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: fluentbit
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf
      - ./logs:/var/log/app:ro
      - ./logs:/var/log/auth:ro
    depends_on:
      - loki
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/datasource.yaml:/etc/grafana/provisioning/datasource/datasource.yaml
      - grafanadata:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - backend
    environment:
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: "1"
      CLUSTER_ID: "_SZDFHXxRneR0oslRt14Sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    volumes:
      - kafka_data:/var/lib/kafka/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.ml.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
    ports:
      - "9200:9200"
    networks:
      - backend
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g

  search_service:
    build:
      context: ./search_service
      dockerfile: Dockerfile
    container_name: search_service
    depends_on:
      - kafka
      - elasticsearch
    ports:
      - "8085:8085"
    networks:
      - backend
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=products
      - KAFKA_GROUP_ID=search-indexer-group
      - ES_URL=http://elasticsearch:9200
    env_file:
      - ./search_service/.env
    volumes:
      - ./search_service/.env:/app/.env
      - ./search_service/config/elasticsearch.yaml:/app/config/elasticsearch.yaml

  content_service:
    build:
      context: ./content_service
      dockerfile: Dockerfile
    container_name: content_service
    depends_on:
      - auth_service
    ports:
      - "8086:8086"
    env_file:
      - ./content_service/.env
    volumes:
      - ./content_service/config/server.yml:/app/config/server.yml
      - ./content_service/.env:/app/.env
    networks:
      - backend

  products_service:
    build:
      context: ./products_service
      dockerfile: Dockerfile
    container_name: products_service
    depends_on:
      - search_service
      - content_service
    ports:
      - "8087:8087"
      - "50051:50051"
    networks:
      - backend

volumes:
  auth_postgres_data:
  delivery_postgres_data:
  comment_postgres_data:
  redis_data:
  prometheus_data:
  grafanadata:
  logs:
  kafka_data:

networks:
  backend: